name: Update APT Repository

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-apt-repo.yml'

# Define environment variables
env:
  GPG_KEY_ID: "ZED_DEB_SIGNER"

jobs:
  update-repo:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: apt-repo
          fetch-depth: 1
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install APT Repository Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils curl gnupg
          which apt-ftparchive || sudo apt-get install -y apt

      - name: Setup GPG Key
        run: |
          # Create GPG directory
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Create GPG key from secret if provided
          if [ -n "${{ secrets.APT_SIGNING_KEY }}" ]; then
            echo "Using provided GPG key"
            echo "${{ secrets.APT_SIGNING_KEY }}" | gpg --batch --import
            # Get the key ID for later use
            export GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
            echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          else
            echo "No GPG key provided, generating temporary one"
            # Generate a temporary GPG key for signing
            cat > /tmp/gpg-gen-key << EOF
          %echo Generating a GPG key for Zed Debian Repository
          Key-Type: RSA
          Key-Length: 4096
          Name-Real: Zed Debian Repository Signing Key
          Name-Email: zed-deb-signer@github.com
          Expire-Date: 0
          %no-protection
          %commit
          %echo Done
          EOF
            gpg --batch --gen-key /tmp/gpg-gen-key
            export GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
            echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
            rm /tmp/gpg-gen-key
          fi

          # Export the public key to include in the repository
          gpg --armor --export $GPG_KEY_ID > apt-repo/dists/stable/pubkey.asc

          echo "GPG Key setup complete with ID: $GPG_KEY_ID"

      - name: Create Repository Structure
        run: |
          cd apt-repo
          mkdir -p dists/stable/main/binary-amd64
          mkdir -p dists/stable/main/binary-arm64
          mkdir -p pool/main/z

          # Add a basic repository configuration file
          mkdir -p conf
          cat > conf/distributions << EOF
          Origin: Zed Editor Preview
          Label: Zed Preview
          Codename: stable
          Architectures: amd64 arm64
          Components: main
          Description: Unofficial Debian packages for Zed Editor Preview builds
          EOF

      - name: Get Latest Release Assets
        id: get_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner: repo.owner,
              repo: repo.repo,
              per_page: 1
            });

            if (releases.data.length === 0) {
              return;
            }

            const release = releases.data[0];
            console.log(`Processing release: ${release.tag_name}`);

            for (const asset of release.assets) {
              if (asset.name.endsWith('.deb')) {
                console.log(`Downloading asset: ${asset.name}`);
                const fs = require('fs');
                const path = require('path');
                const { exec } = require('child_process');
                const outputPath = `apt-repo/pool/main/z/${asset.name}`;

                try {
                  // Download the asset using the GitHub API with authentication
                  const response = await github.rest.repos.getReleaseAsset({
                    owner: repo.owner,
                    repo: repo.repo,
                    asset_id: asset.id,
                    headers: {
                      accept: 'application/octet-stream'
                    }
                  });

                  // Save the asset to disk
                  fs.mkdirSync(path.dirname(outputPath), { recursive: true });
                  fs.writeFileSync(outputPath, Buffer.from(response.data));

                  console.log(`Successfully downloaded ${asset.name}`);

                  // Verify the downloaded package
                  await new Promise((resolve, reject) => {
                    exec(`dpkg-deb --info "${outputPath}"`, (error, stdout, stderr) => {
                      if (error) {
                        console.error(`Verification failed for ${asset.name}: ${stderr || error.message}`);
                        fs.unlinkSync(outputPath);
                        return reject(new Error(`Package verification failed: ${error.message}`));
                      }
                      console.log(`Successfully verified ${asset.name}`);
                      resolve();
                    });
                  });
                } catch (error) {
                  console.error(`Error processing ${asset.name}: ${error.message}`);
                  // Try to download with curl as a fallback with token authentication
                  console.log(`Trying alternative download method for ${asset.name}...`);
                  try {
                    await new Promise((resolve, reject) => {
                      exec(`curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" --retry 3 --retry-delay 3 -o "${outputPath}" "${asset.browser_download_url}"`,
                        (error, stdout, stderr) => {
                          if (error) {
                            console.error(`Download error: ${error.message}`);
                            return reject(error);
                          }
                          resolve();
                        }
                      );
                    });
                    console.log(`Successfully downloaded ${asset.name} with fallback method`);
                  } catch (fallbackError) {
                    console.error(`Fallback download also failed: ${fallbackError.message}`);
                    throw error; // Re-throw the original error
                  }
                }
              }
            }

      - name: Generate APT Repository Metadata
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd apt-repo

          # List all files in pool directory for debugging
          echo "Contents of pool directory:"
          find pool -type f -ls

          # Verify packages first
          echo "Verifying packages..."
          find pool/main/z -name "*.deb" -exec dpkg-deb --info {} \; || echo "Warning: Some packages may be corrupted"

          # Print file sizes for .deb packages
          echo "Package file sizes:"
          find pool/main/z -name "*.deb" -exec ls -lh {} \;

          # Generate Packages files for each architecture with error handling
          echo "Generating package metadata for amd64..."
          mkdir -p dists/stable/main/binary-amd64
          dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages || exit 1
          gzip -k -f dists/stable/main/binary-amd64/Packages

          echo "Generating package metadata for arm64..."
          mkdir -p dists/stable/main/binary-arm64
          dpkg-scanpackages --arch arm64 pool/ > dists/stable/main/binary-arm64/Packages || exit 1
          gzip -k -f dists/stable/main/binary-arm64/Packages

          # Generate Release file
          echo "Generating Release file..."
          cd dists/stable

          if command -v apt-ftparchive >/dev/null 2>&1; then
            echo "Using apt-ftparchive to generate Release file"
            apt-ftparchive release . > Release
          else
            echo "apt-ftparchive not available, generating basic Release file manually"
            cat > Release << EOF
          Origin: Zed Editor Preview
          Label: Zed Preview
          Suite: stable
          Codename: stable
          Date: $(date -u +"%a, %d %b %Y %H:%M:%S %Z")
          Architectures: amd64 arm64
          Components: main
          Description: Unofficial Debian packages for Zed Editor Preview builds
          EOF
          fi

          # Sign the Release file
          echo "Signing Release file with GPG key: $GPG_KEY_ID"
          if [ -n "$GPG_PASSPHRASE" ]; then
            echo "Using GPG passphrase from GPG_PASSPHRASE secret."
            # Create detached signature
            echo "$GPG_PASSPHRASE" | gpg --yes --batch --no-tty --pinentry-mode loopback --passphrase-fd 0 --default-key $GPG_KEY_ID -abs -o Release.gpg Release
            # Create inline signature (InRelease)
            echo "$GPG_PASSPHRASE" | gpg --yes --batch --no-tty --pinentry-mode loopback --passphrase-fd 0 --default-key $GPG_KEY_ID --clearsign -o InRelease Release
          else
            echo "GPG_PASSPHRASE secret not set. Attempting to sign without passphrase (this will fail if the key requires a passphrase)."
            # Original commands - will fail if key has a passphrase and no agent is configured
            # Create detached signature
            gpg --yes --batch --no-tty --pinentry-mode loopback --default-key $GPG_KEY_ID -abs -o Release.gpg Release
            # Create inline signature (InRelease)
            gpg --yes --batch --no-tty --pinentry-mode loopback --default-key $GPG_KEY_ID --clearsign -o InRelease Release
          fi

          # Create index.html with repository instructions
          cd ../..
          cat > index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Zed Editor Preview APT Repository</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
              pre { background: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
            </style>
          </head>
          <body>
            <h1>Zed Editor Preview APT Repository</h1>
            <p>This is an unofficial, unsigned APT repository for Zed Editor Preview builds.</p>

            <h2>How to use this repository</h2>
            <p>Add the repository to your sources list:</p>
            <pre>
          # Import the GPG key
          curl -fsSL https://${{ github.repository_owner }}.github.io/zed-deb/dists/stable/pubkey.asc | sudo gpg --dearmor -o /usr/share/keyrings/zed-preview-archive-keyring.gpg

          # Update the repository to use the keyring
          echo "deb [signed-by=/usr/share/keyrings/zed-preview-archive-keyring.gpg] https://${{ github.repository_owner }}.github.io/zed-deb stable main" | sudo tee /etc/apt/sources.list.d/zed-preview.list

          # Update package lists
          sudo apt update
            </pre>

            <p>Install Zed Preview:</p>
            <pre>
          sudo apt install zed-preview
            </pre>

            <h2>Available Packages</h2>
            <ul>
              <li><strong>zed-preview</strong> - Latest pre-release version of Zed Editor</li>
            </ul>

            <h2>Source</h2>
            <p>The source code for this repository is available at <a href="https://github.com/${{ github.repository }}">github.com/${{ github.repository }}</a></p>
          </body>
          </html>
          EOF

      - name: Commit and Push APT Repository
        run: |
          cd apt-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update APT repository with latest packages" || echo "No changes to commit"
          git push

name: Daily Zed Pre-release Packaging

on:
  schedule:
    - cron: "0 0 * * *" # Run every day at midnight UTC
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  package-zed:
    name: Package Zed
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.get_release.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest pre-release
        id: get_release
        run: |
          LATEST_PRERELEASE=$(curl -s https://api.github.com/repos/zed-industries/zed/releases | jq '.[] | select(.prerelease==true) | .tag_name' | head -n 1 | tr -d '"')
          echo "LATEST_PRERELEASE=$LATEST_PRERELEASE" >> $GITHUB_ENV
          echo "Found latest pre-release: $LATEST_PRERELEASE"

          # Get the latest release from this repo
          LATEST_REPO_RELEASE=$(curl -s https://api.github.com/repos/lucasliet/zed-deb/releases/latest | jq -r '.tag_name // empty')
          echo "Latest repo release: $LATEST_REPO_RELEASE"

          # Set should_build flag
          if [ -z "$LATEST_REPO_RELEASE" ]; then
            # No releases in the repo yet, we should build
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "No existing releases found. Will build new package."
          elif [ "$LATEST_REPO_RELEASE" != "$LATEST_PRERELEASE" ]; then
            # Compare versions without the 'v' prefix
            ZED_VER="${LATEST_PRERELEASE#v}"
            REPO_VER="${LATEST_REPO_RELEASE#v}"

            # Use sort -V for version comparison
            if [ "$(printf '%s\n' "$REPO_VER" "$ZED_VER" | sort -V | head -n1)" != "$ZED_VER" ]; then
              # ZED_VER is newer than REPO_VER
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "New version found: $ZED_VER > $REPO_VER. Will build new package."
            else
              echo "No new version found. Skipping build."
            fi
          else
            echo "Version $LATEST_PRERELEASE already built. Skipping build."
          fi

      - name: Install dependencies
        if: ${{ steps.get_release.outputs.should_build }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq dpkg-dev fakeroot

      - name: Download and Package Linux Assets
        if: ${{ steps.get_release.outputs.should_build }}
        run: |
          mkdir -p temp_download
          cd temp_download

          # Get download URLs for Linux assets
          RELEASE_JSON=$(curl -s "https://api.github.com/repos/zed-industries/zed/releases/tags/$LATEST_PRERELEASE")
          DOWNLOAD_URLS=$(echo "$RELEASE_JSON" | jq '.assets[] | select(.name | contains("zed-linux-")) | .browser_download_url' | tr -d '"')

          # Create array to store package filenames
          PACKAGES=()
          VERSION=${LATEST_PRERELEASE#v}

          # Download and process each Linux asset
          for URL in $DOWNLOAD_URLS; do
            echo "Downloading $URL"
            curl -L -O $URL
          done

          for FILE in zed-linux-*; do
            if [[ ! -f "$FILE" ]]; then
              echo "No matching files found to extract"
              exit 1
            fi

            echo "Processing file: $FILE"

            # Clean extraction directories for this file
            rm -rf ../temp_extract ../app_extract
            mkdir -p ../temp_extract
            mkdir -p ../app_extract

            if [[ $FILE == *.tar.gz ]]; then
              echo "Extracting tar.gz file..."
              tar -xzf "$FILE" -C ../temp_extract
            elif [[ $FILE == *.zip ]]; then
              echo "Extracting zip file..."
              unzip "$FILE" -d ../temp_extract
            fi

            # Get directory name from the original file (removing extension)
            DIRNAME="${FILE%.tar.gz}"
            DIRNAME="${DIRNAME%.zip}"

            cd ../temp_extract
            echo "Looking for extracted content in temp_extract directory..."
            ls -la

            # Try to find the extracted directory
            FOUND_DIR=""
            if [ -d "$DIRNAME" ]; then
              FOUND_DIR="$DIRNAME"
            else
              # If exact name not found, look for any directory
              FOUND_DIR=$(find . -maxdepth 1 -type d | grep -v "^\.$" | head -1)
              FOUND_DIR="${FOUND_DIR#./}"
            fi

            if [ -n "$FOUND_DIR" ] && [ -d "$FOUND_DIR" ]; then
              echo "Found extracted directory: $FOUND_DIR"
              echo "Moving extracted files to app_extract directory"
              cp -r "$FOUND_DIR"/* ../app_extract/
            else
              echo "Error: Could not find extracted directory. Check if extraction worked properly."
              ls -la
              exit 1
            fi

            # Verify app_extract has content
            cd ..
            echo "Verifying app_extract directory contents:"
            ls -la app_extract
            if [ ! "$(ls -A app_extract)" ]; then
              echo "Error: app_extract directory is empty. Extraction failed."
              exit 1
            fi

            # Determine architecture from the file name
            ARCH="amd64"  # Default architecture
            if [[ "$FILE" == *"aarch64"* ]]; then
              ARCH="arm64"
            elif [[ "$FILE" == *"x86_64"* ]]; then
              ARCH="amd64"
            fi
            echo "Detected architecture: $ARCH"

            # Create package structure
            mkdir -p zed-deb-pkg/DEBIAN
            mkdir -p zed-deb-pkg/usr

            # Create control file
            cat > zed-deb-pkg/DEBIAN/control << EOF
          Package: zed-preview
          Version: ${VERSION}
          Section: editors
          Priority: optional
          Architecture: ${ARCH}
          Maintainer: Zed Industries <support@zed.dev>
          Description: Zed Editor Preview
           A high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.
          EOF

            # Copy all application files directly to the package maintaining structure
            echo "Copying all application files to package"
            cp -r app_extract/* zed-deb-pkg/usr/ || { echo "Error copying files from app_extract to package"; exit 1; }

            # Build the package
            DEB_FILENAME="zed-preview_${VERSION}_${ARCH}.deb"
            dpkg-deb --build --root-owner-group zed-deb-pkg $DEB_FILENAME

            # Add to packages array
            PACKAGES+=("$DEB_FILENAME")

            echo "Created package: $DEB_FILENAME"

            # Go back to downloads directory for next file
            cd temp_download
          done

          # Save packages list to environment variable (comma separated)
          echo "DEB_PACKAGES=$(IFS=,; echo "${PACKAGES[*]}")" >> $GITHUB_ENV
          cd ..

      - name: Create GitHub Release
        if: ${{ steps.get_release.outputs.should_build }}
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_PRERELEASE }}
          name: "Zed Debian Packages for ${{ env.LATEST_PRERELEASE }}"
          body: "Debian packages for Zed Editor, source: https://github.com/zed-industries/zed/releases/tag/${{ env.LATEST_PRERELEASE }}"
          draft: false
          prerelease: false
          generate_release_notes: false
          files: |
            *.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: ${{ steps.get_release.outputs.should_build == 'true' }}
        run: |
          rm -rf temp_download
          rm -rf temp_extract
          rm -rf zed-deb-pkg
          rm -f *.deb

  publish-apt:
    name: Publish APT Repository
    needs: [package-zed]
    if: ${{ needs.package-zed.outputs.should_build }}
    uses: ./.github/workflows/update-apt-repo.yml
